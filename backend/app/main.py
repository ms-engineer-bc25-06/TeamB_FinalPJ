import os
import logging
from typing import AsyncGenerator
from contextlib import asynccontextmanager
from dotenv import load_dotenv
from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
import firebase_admin
from firebase_admin import credentials, auth
import crud
import schemas
from models import Base

from voice_api import router as voice_router

load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

#  Firebase Admin„ÅÆÂàùÊúüÂåñ„ÅóÁßòÂØÜÈçµ„ÇíË™≠„ÅøËæº„ÇÄ
cred_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", "/firebase-service-account.json")
cred = credentials.Certificate(cred_path)
firebase_admin.initialize_app(cred)

# SQLAlchemy„ÅÆÈùûÂêåÊúüDB„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíË®≠ÂÆö
engine = create_async_engine(DATABASE_URL, echo=True)
async_session_local = async_sessionmaker(autocommit=False, autoflush=False, bind=engine)

# --- Lifespan Manager ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    yield

# lifespan„ÇíÁôªÈå≤„Åó„Å¶„ÄÅËµ∑ÂãïÊôÇ„ÅÆÂá¶ÁêÜ„ÇíÊúâÂäπÂåñ
app = FastAPI(
    title="„Éï„Ç°„Ç§„É´‰øùÂ≠ò„ÉªÁÆ°ÁêÜAPI",
    description="""
    ## Ê¶ÇË¶Å
    Â≠ê‰æõ„ÅÆÈü≥Â£∞ÂÖ•Âäõ„Å®ÊñáÂ≠óËµ∑„Åì„Åó„ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´„ÇíAWS S3„Å´ÂÆâÂÖ®„Å´‰øùÂ≠ò„Åó„ÄÅ„Éá„Éº„Çø„Éô„Éº„Çπ„ÅßÁÆ°ÁêÜ„Åô„ÇãAPI
    
    ## ‰∏ª„Å™Ê©üËÉΩ
    - üîê FirebaseË™çË®º„Å´„Çà„Çã„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ
    - üé§ Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºàS3ÁΩ≤Âêç‰ªò„ÅçURLÔºâ
    - üìù „ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´„ÅÆÁÆ°ÁêÜ
    - üìä „É¶„Éº„Ç∂„ÉºÂõ∫Êúâ„ÅÆ„Éï„Ç°„Ç§„É´‰∏ÄË¶ßÂèñÂæó
    
    ## „Çª„Ç≠„É•„É™„ÉÜ„Ç£
    - Firebase ID„Éà„Éº„ÇØ„É≥„Å´„Çà„ÇãË™çË®º
    - S3ÁΩ≤Âêç‰ªò„ÅçURL„Å´„Çà„ÇãÂÆâÂÖ®„Å™„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
    - „É¶„Éº„Ç∂„ÉºÂõ∫Êúâ„ÅÆ„Éï„Ç°„Ç§„É´„Éë„ÇπÂàÜÈõ¢
    
    ## ÂØæÂøú„Éï„Ç°„Ç§„É´ÂΩ¢Âºè
    - **Èü≥Â£∞**: WebM, WAV, MP3
    - **„ÉÜ„Ç≠„Çπ„Éà**: TXT
    
    ## ‰ΩøÁî®ÊñπÊ≥ï
    1. `/api/v1/login` „ÅßFirebase ID„Éà„Éº„ÇØ„É≥„Çí‰ΩøÁî®„Åó„Å¶„É≠„Ç∞„Ç§„É≥
    2. `/voice/get-upload-url` „Åß„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁî®URL„ÇíÂèñÂæó
    3. Áõ¥Êé•S3„Å´„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
    4. `/voice/save-record` „Åß„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíDB„Å´‰øùÂ≠ò
    5. `/voice/records/{user_id}` „Åß„Éï„Ç°„Ç§„É´‰∏ÄË¶ß„ÇíÂèñÂæó
    """,
    lifespan=lifespan
)

# CORS„Éü„Éâ„É´„Ç¶„Çß„Ç¢Ë®≠ÂÆö
origins = [
    "http://localhost:3000",
    # TODO:Êú¨Áï™Áî®„Éâ„É°„Ç§„É≥„ÇíÂæå„ÅßËøΩÂä†,
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ÂÖ•ÂäõÈü≥Â£∞„Åã„Çâ‰Ωú„Çâ„Çå„Åü„Éï„Ç°„Ç§„É´„ÇíÁÆ°ÁêÜ„Åô„ÇãAPI„ÇíËøΩÂä†
app.include_router(voice_router)

# DB„Çª„ÉÉ„Ç∑„Éß„É≥„Çí‰æùÂ≠òÈñ¢‰øÇ„Å®„Åó„Å¶ÂÆöÁæ©
async def get_db() -> AsyncGenerator[AsyncSession, None]:
    async with async_session_local() as session:
        yield session

# --- API„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà ---
@app.post("/api/v1/login", response_model=schemas.UserResponse)
async def login(token: schemas.Token, db: AsyncSession = Depends(get_db)):
    try:
        decoded_token = auth.verify_id_token(token.id_token)
    except Exception as e:
        raise HTTPException(status_code=401, detail=f"Invalid token: {e}")


    uid = decoded_token['uid']
    email = decoded_token.get('email')
    email_verified = decoded_token.get('email_verified', False)
    nickname = decoded_token.get('name')

    user = await crud.get_or_create_user(
        db,
        uid=uid,
        email=email,
        email_verified=email_verified,
        nickname=nickname
    )


    if user is None:
        raise HTTPException(status_code=500, detail="Could not process user.")

    return user